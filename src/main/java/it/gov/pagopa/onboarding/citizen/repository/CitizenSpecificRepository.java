package it.gov.pagopa.onboarding.citizen.repository;

import it.gov.pagopa.onboarding.citizen.model.CitizenConsent;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * <p>Contract for custom MongoDB aggregation queries on {@link CitizenConsent} collection.</p>
 *
 * <p>Defines complex queries that cannot be auto-generated by Spring Data MongoDB,
 * such as nested field projections and dynamic consent filtering.</p>
 *
 * <p>Implementation: {@link CitizenSpecificRepositoryImpl}</p>
 *
 * @see CitizenRepository
 */
public interface CitizenSpecificRepository {

    /**
     * <p>Finds a specific TPP consent within a citizen's document.</p>
     *
     * <p>Projects only the requested consent field ({@code consents.<tppId>}) using MongoDB aggregation.</p>
     *
     * @param fiscalCode citizen's fiscal code (must not be {@code null})
     * @param tppId      TPP identifier (must not be {@code null})
     * @return {@code Mono} emitting projected document with single consent, empty if not found or tppId is {@code null}
     */
    Mono<CitizenConsent> findByFiscalCodeAndTppId(String fiscalCode, String tppId);

    /**
     * <p>Finds all citizens with an enabled consent for a specific TPP.</p>
     *
     * <p>Filters documents where {@code consents.<tppId>.tppState = true} and projects only fiscal code and the matching consent.</p>
     *
     * @param tppId TPP identifier (must not be {@code null})
     * @return {@code Flux} emitting projected documents with enabled consent (possibly empty)
     */
    Flux<CitizenConsent> findByTppIdEnabled(String tppId);

    /**
     * <p>Finds a citizen with at least one enabled consent across all TPPs.</p>
     *
     * <p>Uses {@code $objectToArray} to flatten the consents map and filters for {@code tppState = true}.</p>
     *
     * @param fiscalCode citizen's fiscal code (must not be {@code null})
     * @return {@code Mono} emitting the document if at least one consent is enabled, empty otherwise
     */
    Mono<CitizenConsent> findByFiscalCodeWithAtLeastOneConsent(String fiscalCode);
}
